<?php
if (isset($_POST["PHPSESSID"])) {
	session_id($_POST["PHPSESSID"]);
}
include '../../configs/config.inc.php';
include ROOTPATH.'/includes/model.class.php';
include ROOTPATH.'/modules/configuration/inc/configuration.php';
include ROOTPATH.'/includes/functions.php';

include ROOTPATH.'/admin/functions.php';
include 'lang/property.en.lang.php';
include 'inc/property.php';
include_once ROOTPATH.'/modules/agent/inc/agent.php';

include_once ROOTPATH.'/modules/general/inc/ftp.php';
include_once ROOTPATH.'/modules/general/inc/media.php';

$action = getParam('action');
$token = getParam('token');
/*
$action = 'action-module';
*/
if (!$_SESSION['Admin']) {
	die('logout');
}
restrict4AjaxBackend();

$perm_ar = permission($_SESSION['Admin']['role_id'], Tab_getIdFromToken($token));				 
//include_once ROOTPATH.'/utils/ajax-upload/server/php.php';
include_once ROOTPATH.'/utils/ajax-upload/server/php.php';

if (eregi('-doc',$action)) {//upload-doc,delete-doc
	include_once ROOTPATH.'/modules/general/inc/documents.class.php';
	include_once 'inc/property_document.class.php';	
	
	if (!isset($document_cls) or !($document_cls instanceof Documents)) {
		$document_cls = new Documents();
	}
	
	if (!isset($property_document_cls) or !($property_document_cls instanceof Property_document)) {
		$property_document_cls = new Property_document();
	}

	__docAction();
	exit();
}

if (eregi('-media',$action)) {//upload-media,delete-media,default-media

    include_once ROOTPATH.'/modules/general/inc/medias.class.php';
	include_once 'inc/property_media.class.php';
    include_once  ROOTPATH.'/modules/package/inc/package.php';
	
	if (!isset($media_cls) or !($media_cls instanceof Medias)) {
		$media_cls = new Medias();
	}
	
	if (!isset($property_media_cls) or !($property_media_cls instanceof Property_media)) {
		$property_media_cls = new Property_media();
	}	

	__mediaAction();
	exit();
}


if (eregi('-property',$action)) {
	include_once ROOTPATH.'/modules/general/inc/regions.php';
	include_once ROOTPATH.'/modules/general/inc/documents.class.php';
	include_once ROOTPATH.'/modules/general/inc/options.php';
	
	include_once ROOTPATH.'/modules/comment/inc/comment.php';
	include_once ROOTPATH.'/modules/note/inc/note.php';
	
	include_once ROOTPATH.'/modules/agent/inc/agent.php';
	include_once 'inc/property.php';
	include_once 'inc/admin.property.php';
	include_once ROOTPATH.'/modules/general/inc/medias.class.php';
	include_once ROOTPATH.'/includes/checkingform.class.php';
	include_once ROOTPATH.'/modules/notification/notification.php';

	
	switch ($action) {
		case 'delete-property':case 'delete-property-focus':case 'delete-property-home':case 'delete-property-inactive':
			if ($perm_ar['delete'] == 1) {
				__propertyDeleteAction();
			} else {
				die(json_encode($perm_msg_ar['delete']));
			}
		break;
		case 'multidelete-property':case 'multidelete-property-focus':case 'multidelete-property-home':case 'multidelete-property-inactive':
			if ($perm_ar['delete'] == 1) {
				__propertyMultiDeleteAction();
			} else {
				die(json_encode($perm_msg_ar['delete']));
			}
		break;
		case 'list-property':case 'list-property-focus':case 'list-property-home':case 'list-property-inactive':
			if ($perm_ar['view'] == 1) {
				__propertyListAction();
			} else {
				die(json_encode($perm_msg_ar['view']));
			}
		break;
		case 'active-property':case 'active-property-focus':case 'active-property-home':case 'active-property-inactive':
			if ($perm_ar['edit'] == 1) {
				__propertyAttributeAction('active');
			} else {
				die(json_encode($perm_msg_ar['edit']));
			}
		break;	
		case 'focus-property':case 'focus-property-focus':case 'focus-property-home':case 'focus-property-inactive':
			if ($perm_ar['edit'] == 1) {
				__propertyAttributeAction('focus');
			} else {
				die(json_encode($perm_msg_ar['edit']));
			}
		break;	
		case 'set_jump-property':case 'set_jump-property-focus':case 'set_jump-property-home':case 'set_jump-property-inactive':
			if ($perm_ar['edit'] == 1) {
				__propertyAttributeAction('set_jump');
			} else {
				die(json_encode($perm_msg_ar['edit']));
			}
		break;	
		case 'agent_active-property':case 'agent_active-property-focus':case 'agent_active-property-home':case 'agent_active-property-inactive':
			if ($perm_ar['edit'] == 1) {
				__propertyAttributeAction('agent_active');
			} else {
				die(json_encode($perm_msg_ar['edit']));
			}
		break;	
		case 'validate-property':case 'validate-property-focus':case 'validate-property-home':case 'validate-property-inactive':
			__propertyValidateAction();
		break;
        case 'multiactive-property':case 'multiactive-property-focus':case 'multiactive-property-home':case 'multiactive-property-inactive':
			if ($perm_ar['edit'] == 1) {
				__propertyActiveAction();
			} else {
				die(json_encode($perm_msg_ar['edit']));
			}
        break;
        case 'change_pay-property':case 'multichange_pay-property':
			if ($perm_ar['edit'] == 1) {
				__propertyChangePay();
			} else {
				die(json_encode($perm_msg_ar['edit']));
			}
        break;
        case 'filter-property':
            $options = array();
            $options[] = array('value' => 'all', 'title' => 'All');
            $options[] = array('value' => 'auction','title'=>'Live Auction');
            $options[] = array('value' => 'forthcoming','title'=>'Forthcoming Auction');
            $auction_sale_ar = $property_entity_option_cls->getChildsByParentCode('auction_sale');
            foreach ($auction_sale_ar as $row) {
                $options[] = array('value' => $row['code'], 'title' => $row['title']);
            }
            $options[] = array('value'=>'stop_bid','title'=>'Bidding Stopped');
            $options[] = array('value'=>'sold','title'=>'Sold/Rent');
            $result = array('data' => $options);
            die(json_encode($result));
            break;
	}
}
switch ($action){
    case 'get-package':
        $package = getParam('package',0);
        //$auction = getParam('auction');
        $field = getParam('field','*');
        $row = $package_cls->getRow('SELECT '.$field.' FROM '.$package_cls->getTable().' WHERE package_id = '.$package/*.' AND property_type = '.$auction*/,true);
        if (is_array($row) and count($row)>0 ){
            die(_response($row[$field]));
        } /*else{
            $row1 = $package_cls->getRow('SELECT '.$field.' FROM '.$package_cls->getTable().' WHERE property_type = '.$auction,true);
            die(_response($row1));
        }*/
        die(_response(array('error'=>1)));
        break;
    case 'get-nameAgent':
        $agent_id = getParam('agent_id');
        die(_response(array('data'=>formUnescape(A_getFullName($agent_id)))));
        break;
    case 'get-valid':
        $name_agent =(getParam('name',''));
        $agent_id = getParam('id',0);
        $type = getParam('type','');

        $rows = $agent_cls->getRow("SELECT a.*, at.title FROM ".$agent_cls->getTable()." AS a
                                    LEFT JOIN ".$agent_cls->getTable('agent_type')." AS at
                                    ON at.agent_type_id = a.type_id
                                    WHERE a.is_active = 1 AND a.agent_id = ".$agent_id,true);
        //print_r($agent_cls->sql);
        if (is_array($rows) and count($rows)> 0){
            if (!AI_isBasic($agent_id) || $rows['title'] == 'agent'){
                $result = array('success'=>1);
            }else{
                $result = array('error'=>1,
                             'msg'=> 'Agent is basic !');
            }
        } else {
			if ($type == 'partner'){
				 $wh_str = " AND (SELECT agt.title
					   FROM ".$agent_cls->getTable('agent_type')." AS agt
					   WHERE agt.agent_type_id = a.type_id
					   ) = 'partner'";
			} else {
				 $wh_str = " AND (SELECT agt.title
					   FROM ".$agent_cls->getTable('agent_type')." AS agt
					   WHERE agt.agent_type_id = a.type_id
					   ) <> 'partner'";
			}
			$rows_ = $agent_cls->getCRows(array('firstname', 'lastname', 'email_address', 'is_active', 'agent_id'), "concat(UCASE(firstname),' ',UCASE(lastname)) LIKE '%".strtoupper($name_agent)."%'".$wh_str);

			if (is_array($rows_) and count($rows_) > 0){//multi-agent
				$data = array();
				foreach ($rows_ as $row){
					$full_name = $row['firstname'].' '.$row['lastname'].' ('.$row['email_address'].')';
					$full_name .= $row['is_active'] == 0?'<a href="javascript:void(0)" onclick="activeAgent(\''.$row['agent_id'].'\')" class="grid-a" name="'.$row['agent_id'].'">Active</a>':'';
					$data[] = array('boxLabel' => $full_name,
									'name' => 'agent',
									'inputValue' => $row['firstname'].' '.$row['lastname'],
									'disabled' => $row['is_active'] == 1?false:true,
									'id' => $row['agent_id']);
				}
				$result = array('error' => 1, 'data' => $data);
			} else {//not found
				$result = array('error'=>1, 'msg'=>'Agent not found !');
			}

		}
        die(json_encode($result));
        break;
    case 'getPackage':
        global $property_cls, $package_cls;
        $auction_sale_ar = PEO_getAuctionSale();
        $property_type = getParam('type',$auction_sale_ar['auction']);
        $property_id = restrictArgs(getPost('property_id',0));
        if ($property_id == 0){
            $agent_id = restrictArgs(getPost('agent',0));
            $agent = PE_getAgent($agent_id);
            $of_agent = $agent['title'] == 'agent'?1:0;
        }else{
            $of_agent = PE_isTheBlock($property_id,'agent');
        }
        $package_tpl = PK_getPackageTpl($property_id,1,$property_type,$of_agent);
        die(json_encode($package_tpl));
        break;
}

#=========================================================================#

/**
@ function : __docAction
**/

function __docAction() {
	global $token, $action, $property_document_cls;
	$document_id = (int)restrictArgs(getParam('document_id',0));
	$target = getPost('target');
	$property_id = (int)restrictArgs(getQuery('property_id',0));
	$agent_id = (int)$_SESSION['admin']['agent']['id'];
	$path = $_SESSION['admin']['property']['path'];
	$path_relative = '/store/uploads/'.$agent_id.'/'.$property_id;
	
	$result = array();
	try {
		if ($document_id <= 0) {
			throw new Exception('It can not find the type of document.');
		}
		
		if ($agent_id <= 0 || $property_id <= 0) {
			throw new Exception('No permission.');
		}
		
		switch ($action) {
			case 'upload-doc':
				createFolder($path,2);
				//BEGIN SETTING FOR UPLOADER
				// list of valid extensions, ex. array("jpeg", "xml", "bmp")
				$allowedExtensions = array('pdf','png','jpg');
				// max file size in bytes
				$sizeLimit = 10 * 1024 * 1024 * 1024;
				$isCheckSetting = false;
				
				$uploader = new qqFileUploader($allowedExtensions, $sizeLimit, $isCheckSetting);
				$result = $uploader->handleUpload($path);
				// to pass data through iframe you will need to encode all html tags
				$result['info'] = '';
				if (isset($result['success'])) {
					//$row = $property_document_cls->getRow('property_id='.$property_id.' AND document_id='.$document_id);
					$row = $property_document_cls->getCRow(array('file_name', 'property_document_id'), 'property_id='.$property_id.' AND document_id='.$document_id);
					if (is_array($row) and count($row)>0) {
						$data = array('file_name' => $path_relative.'/'.$result['filename'],
									  'active' => 1);
						$property_document_cls->update($data,'property_document_id='.$row['property_document_id']);
					} else {
						$data = array('property_id' => $property_id,
									  'document_id' => $document_id,
									  'file_name' => $path_relative.'/'.$result['filename'],
									  'admin' => 1,
									  'active' => 1);
						$property_document_cls->insert($data);
					}
					ftp_propertyUploadDoc($path, basename($result['filename']));
				}
				
				$result['nextAction'] = array();
				$result['nextAction']['method'] = 'showDoc';
				$result['nextAction']['args'] = array('actionDelete' => '/modules/property/action.admin.php?action=delete-doc&property_id='.$property_id.'&document_id='.$document_id.'&token='.$token,
							'actionDown' => '/modules/property/action.php?action=down-doc&property_id='.$property_id.'&document_id='.$document_id.'&token='.$token,
							'target' => 'lst_'.$document_id,
							'file_name' => $result['filename'],
							'document_id' => $document_id,
							'property_id' => $property_id,
							'admin' => 1);
			break;
			case 'delete-doc':
				//$row = $property_document_cls->getRow('property_id = '.$property_id.' AND document_id = '.$document_id);
				$row = $property_document_cls->getCRow(array('file_name'), 'property_id = '.$property_id.' AND document_id = '.$document_id);
				
				$result = array('success' => 1,
								'type' => 'doc',
								'target' => $target,
								'replace_text' => 'No file chosen');
				
				if (is_array($row) and count($row) > 0) {
					
					$infoAr = pathinfo($row['file_name']);
					propertyDeleteDoc($infoAr['dirname'], $infoAr['basename']);
					ftp_propertyDeleteDoc($infoAr['dirname'], $infoAr['basename']);
					
					$property_document_cls->delete('property_id = '.$property_id.' AND document_id = '.$document_id);
				}
						
			break;
		}
	} catch (Exception $e) {
		$result['error'] = $e->getMessage();
	}
	die( json_encode($result));	
}

/**
@ function __mediaAction
**/

function __mediaAction() {
	global $token, $action, $media_cls, $property_media_cls, $property_cls, $package_cls;
	$property_id = (int)restrictArgs(getQuery('property_id',0));
	$agent_id = (int)$_SESSION['admin']['agent']['id'];
	$path = $_SESSION['admin']['property']['path'];
	$path_relative = '/store/uploads/'.$agent_id.'/'.$property_id;
	$target = getParam('target');
	$type = getQuery('type');
	
	$result = array();
	try {
		
		if ($agent_id <= 0 || $property_id <= 0) {
			throw new Exception('No permission.');
		}
		switch ($action) {
			case 'upload-media':
				createFolder($path,2);
                $row = $property_cls->getRow('SELECT pk.*
										  FROM '.$property_cls->getTable().' AS p, '.$package_cls->getTable().' AS pk
										  WHERE p.package_id = pk.package_id AND p.property_id = '.$property_id,true);
                if (!is_array($row) || count($row) == 0) {
                    die(json_encode(array('error' => 'Please select the package for this property.'."<br/>".'<a style="color:#006BD7" href = "/?module=property&action=register&step=2">Back to step 2.</a>')));
                }
				
				$path_pre = '';
                $sizeLimit = 10 * 1024 * 1024 * 1024;
                if ($type == 'photo') {
                    if ($row['photo_num'] != 'all') {
                        $photo_ar = PM_getPhoto($property_id);
                        $row['photo_num'] = (int)$row['photo_num'];

                        if ($row['photo_num'] == 0) {
                            die(_response(array('error' => 'You can not upload image with current package.')));
                        } else if (count(@$photo_ar['photo']) >= $row['photo_num']){
                            die(_response(array('error' => 'You have reached to maximun image that you can upload ('.$row['photo_num'].' images).')));
                        }
                    }
                    $allowedExtensions = array('gif','jpg','jpeg','bmp','png');
                    $path_pre = $path_relative.'/thumbs/';
                } else if ($type == 'video') {
                    $video_ar = PM_getVideo($property_id);
                    if ($row['video_num'] != 'all') {
                        $row['video_num'] = (int)$row['video_num'];
                        if ($row['video_num'] == 0) {
                            die(_response(array('error' => 'You can not upload video with current package.')));
                        } else if (count(@$video_ar['video']) >= $row['video_num']) {
                            die(_response(array('error' => 'You have reached to maximun video that you can upload ('.$row['video_num'].' videos).')));
                        }
                    }

                    if (strlen($row['video_capacity']) > 0) {
                        $mb = (int)str_replace('mb','',$row['video_capacity']);
                        if ($mb > 0) {
                            $sizeLimit = $mb * 1024 * 1024;
                        }
                    }
                    $allowedExtensions = array('flv','wmv','mp4');
                    $path_pre = $path_relative.'/';
                }


                $isCheckSetting = false;
				if (getParam('flash') == 1) {
					unset($_GET['qqfile']);
				}

                $uploader = new qqFileUploader($allowedExtensions, $sizeLimit, $isCheckSetting);
                $result = $uploader->handleUpload($path);
                // to pass data through iframe you will need to encode all html tags
                if (isset($result['success'])) {
                    $datas = array('file_name' => $path_relative.'/'.$result['filename'],'type'=>$type,'active'=>1);

                    if ($type == 'photo') {
						propertyUploadMedia($path, $result['filename']);					
						ftp_propertyUploadMedia($path, $result['filename']);					
                    }

                    $media_id = 0;
                    $media_cls->insert($datas);
                    
                    if (!$media_cls->hasError()) {
                        $media_id = $media_cls->insertId();
                        $datas = array('property_id'=>$property_id,'media_id'=>$media_id);
                        $property_media_cls->insert($datas);
                    }

                    $result['nextAction'] = array();
                    $result['nextAction']['method'] = 'show'.ucfirst($type);
                    $result['nextAction']['args'] = array('actionDelete' => '/modules/property/action.php?action=delete-media&type='.$type.'&media_id='.$media_id,
                                'actionDefault' => '/modules/property/action.php?action=default-media&type='.$type.'&media_id='.$media_id,
                                'target' => $target,
                                'image' => MEDIAURL.$path_pre.$result['filename'],
                                'file_name' => $result['filename'],
                                'media_id' => @$datas['media_id'],
                                'property_id' => $property_id,
                                'is_admin' => 1,
								'ext' => strtolower(end(explode(".", $result['filename']))));

                    die(_response($result));
                }
			break;
			case 'delete-media':
				$media_id = (int)restrictArgs(getQuery('media_id',0));
				if ($media_id <= 0) {
					throw new Exception('It can not find the type of media.');
				}
				
				$property_media_cls->delete('property_id = '.$property_id.' AND media_id = '.$media_id);
				
				//$row = $media_cls->getRow('media_id = '.$media_id);
				$row = $media_cls->getCRow(array('file_name'), 'media_id = '.$media_id);
				if (is_array($row) and count($row) > 0) {
					$infoAr = pathinfo($row['file_name']);
					propertyDeleteMedia($infoAr['dirname'], $infoAr['basename']);
					ftp_propertyDeleteMedia($infoAr['dirname'], $infoAr['basename']);
					
					$media_cls->delete('media_id = '.$media_id);
				}
				$result = array('success' => 1, 
								'target' => $target);
			break;
			case 'default-media':
				$media_id = (int)restrictArgs(getQuery('media_id',0));
				$default = getParam('default',0);
				
				if ($media_id == 0 || $property_id == 0) {
					throw new Exception('Error when setting default.');
				}
				
				//$row = $property_media_cls->getRow('property_id = '.$property_id.' AND media_id = '.$media_id);
				$row = $property_media_cls->getCRow(array('property_id'), 'property_id = '.$property_id.' AND media_id = '.$media_id);
				if (is_array($row) and count($row) > 0) {
					$property_media_cls->update(array('default' => 0),'property_id = '.$property_id);
					$property_media_cls->update(array('default' => $default),'property_id = '.$property_id.' AND media_id = '.$media_id);
				}
				
				$result = array('success' => 1,
								'target' => $target,
								'default' => $default);
			break;
		}
	} catch (Exception $e) {
		$result['error'] = $e->getMessage();
	}
	die(json_encode($result));
}

/**
@ function : __propertyDeleteAction
**/

function __propertyDeleteAction() {
	global $property_cls,$systemlog_cls;
	$message = '';
	
	$property_id = (int)restrictArgs(getParam('property_id',0));
	if ($property_id > 0) {
		//$row = $property_cls->getRow('property_id = '.$property_id);
		$row = $property_cls->getCRow(array('agent_id'), 'property_id = '.$property_id);
		if (is_array($row) && count($row) > 0) {
			Property_deleteFull($property_id, $row['agent_id']);
			$message = 'Property id: '.$property_id.' had been deleted !';
			// Write Logs					
			$systemlog_cls->insert(array ('Updated' => date("Y-m-d H:i:s"), 
										 'Action' => 'DELETE',
										 'Detail' => "DELETE PROPERTY ID: ". $property_id,
										 'UserID' => $_SESSION['Admin']['EmailAddress'],
										 'IPAddress' =>$_SERVER['REMOTE_ADDR']));
		}		  
	}	
	// UPDATE NOTIFICATION TO ANDROID
	push(0, array('type_msg' => 'update-property'));
	
	die(json_encode($message));	
}

/**
@ function : __propertyMultiDeleteAction
**/

function __propertyMultiDeleteAction() {
	global $property_cls,$systemlog_cls;
	$property_ids = getParam('property_id');
	if (strlen($property_ids) > 0) {
		$property_id_ar = explode(',',$property_ids);
		if (count($property_id_ar) > 0) {
			foreach ($property_id_ar as $property_id) {
				//$row = $property_cls->getRow('property_id = '.$property_id);
				$row = $property_cls->getCRow(array('agent_id'), 'property_id = '.$property_id);
				if (is_array($row) && count($row) > 0) {
					Property_deleteFull($property_id, $row['agent_id']);
					$message = 'Deleted #'.$property_id;
					// Write Logs					
					$systemlog_cls->insert(array ('Updated' => date("Y-m-d H:i:s"), 
												 'Action' => 'DELETE',
												 'Detail' => "DELETE PROPERTY ID: ". $property_id,
												 'UserID' => $_SESSION['Admin']['EmailAddress'],
												 'IPAddress' =>$_SERVER['REMOTE_ADDR']));
				}		  
			}
		}
	}
	// UPDATE NOTIFICATION TO ANDROID
	push(0, array('type_msg' => 'update-property'));
	
	die(json_encode('Deleted successful!'));
}

/**
@ function : __propertyListAction
**/

function __propertyListAction() {
	global $action, $region_cls, $property_cls, $property_entity_option_cls, $agent_cls, $property_document_cls, $property_media_cls,$config_cls;
		
	$start = (int)restrictArgs(getParam('start',0));
	$limit = (int)restrictArgs(getParam('limit',20));
	$sort_by = getParam('sort','pro.property_id');
	$dir = getParam('dir','ASC');	
	$property_id = (int)restrictArgs(getParam('property_id',0));
	//$search_query = getParam('fields');
	$search_query = getParam('query');
	
	$search_where = '';
	if (strlen($search_query) > 0) {
		$search_where = "WHERE (pro.address LIKE '%".$search_query."%' 
								OR pro.property_id = '".$search_query."'
								OR pro.postcode = '".$search_query."'
								OR pro.suburb LIKE '%".$search_query."%'
								OR pro.state = (SELECT reg1.region_id FROM ".$region_cls->getTable()." AS reg1 WHERE reg1.name= '".$search_query."')
								OR pro.country = (SELECT reg2.region_id FROM ".$region_cls->getTable()." AS reg2 WHERE reg2.name= '".$search_query."')
								OR pro.agent_id = (SELECT agt.agent_id FROM ".$agent_cls->getTable()." AS agt WHERE agt.firstname LIKE '%".$search_query."%' OR agt.lastname LIKE '%".$search_query."%'
							                       OR CONCAT(agt.firstname,' ',agt.lastname) LIKE '%".$search_query."%'))";
	}


   
	
	
	if ( in_array($action,array('list-property-focus','list-property-home','list-property-inactive'))) {
		switch ($action) {
			case 'list-property-focus':
				if (strlen($search_where) > 0) {
					$search_where .= ' AND pro.focus = 1';
				} else {
					$search_where = 'WHERE pro.focus = 1';
				}			
			break;
			case 'list-property-home':
				if (strlen($search_where) > 0) {
					$search_where .= ' AND pro.set_jump = 1';
				} else {
					$search_where = 'WHERE pro.set_jump = 1';
				}			
			break;
            case 'list-property-inactive':
                $_search = ' pro.agent_active = 1
                            AND pro.active = 0
                            AND pro.stop_bid = 0
                            AND ( pro.pay_status = '.Property::CAN_SHOW.' OR pro.pay_status = '.Property::PAY_PENDING.')';
				if (strlen($search_where) > 0) {
					$search_where .= ' AND '.$_search;
				} else {
					$search_where = 'WHERE '.$_search;
				}
			break;
		}
	}

    //filter
    $key = getParam('key','');
    $auction_arr = PEO_getAuctionSale();
    $filter = '';
    if ($key != '' and $key !='all'){
        switch ($key){
            case 'auction':
                $filter = "pro.auction_sale != '".$auction_arr['private_sale']."' AND pro.start_time < '".date('Y-m-d H:i:s')."' AND pro.end_time > '".date('Y-m-d H:i:s')."' AND pro.stop_bid = 0";
                break;
            case 'forthcoming':
                $filter = "pro.auction_sale != '".$auction_arr['private_sale']."' AND pro.start_time > '".date('Y-m-d H:i:s')."'";
                break;
            case 'ebidda-live':
                $filter = "pro.auction_sale = '".$auction_arr['auction']."' AND agtype.title = 'agent'";
                break;
            case 'sold':
                $filter = 'pro.confirm_sold = 1';
                break;
            case 'stop_bid':
                $filter = 'pro.stop_bid = 1';
                break;
            default:
                $filter = "pro.auction_sale = '".$auction_arr[$key]."'";
                break;
        }
        $_filter = $search_where == ''? ' WHERE '.$filter:' AND '.$filter;
    }
	
	$rows = $property_cls->getRows('SELECT SQL_CALC_FOUND_ROWS pro.property_id, 
										pro.address, 
										pro.set_jump, 
										pro.postcode, 
										pro.suburb, 
										pro.type, 
										pro.pay_status,
										pro.price,
										pro.price_on_application,
										pro.open_for_inspection, 
										pro.agent_active, 
										pro.active, 
										agt.firstname, 
										pro.feature, 
										pro.focus, 
										pro.set_jump,
										agt.lastname, 
										pro.views,
										pro.land_size,
										pro.auction_sale,
										pro.stop_bid,
										pro.start_time,
										pro.end_time,
										pro.confirm_sold,
										pro.date_to_reg_bid,
										pro.parking,
										agtype.title AS agent_type,
												
										(SELECT reg1.name 
										FROM '.$region_cls->getTable().' AS reg1
										WHERE reg1.region_id = pro.state) AS state_name,
										
										(SELECT reg2.name 
										FROM '.$region_cls->getTable().' AS reg2
										WHERE reg2.region_id = pro.country) AS country_name,
										
										(SELECT pro_ent_opt1.title 
										FROM '.$property_entity_option_cls->getTable().' AS pro_ent_opt1 
										WHERE pro_ent_opt1.property_entity_option_id = pro.auction_sale) AS auction_name,
										
										(SELECT pro_ent_opt2.title
										FROM '.$property_entity_option_cls->getTable().' AS pro_ent_opt2
										WHERE pro_ent_opt2.property_entity_option_id = pro.type) AS type_name,
		
										(SELECT pro_ent_opt4.title
										FROM '.$property_entity_option_cls->getTable().' AS pro_ent_opt4
										WHERE pro_ent_opt4.property_entity_option_id = pro.bedroom) AS bedroom_name,
		
										(SELECT pro_ent_opt5.title
										FROM '.$property_entity_option_cls->getTable().' AS pro_ent_opt5
										WHERE pro_ent_opt5.property_entity_option_id = pro.bathroom) AS bathroom_name,
		
										(SELECT pro_ent_opt7.title
										FROM '.$property_entity_option_cls->getTable().' AS pro_ent_opt7
										WHERE pro_ent_opt7.property_entity_option_id = pro.car_space) AS car_space_name,
		
										(SELECT pro_ent_opt8.title
										FROM '.$property_entity_option_cls->getTable()." AS pro_ent_opt8
										WHERE pro_ent_opt8.property_entity_option_id = pro.car_port) AS car_port_name,

										(SELECT IF(isnull(max(bid.price)),0,max(bid.price))
										FROM ".$property_cls->getTable('bids')." AS bid
										WHERE bid.property_id = pro.property_id) AS bid_price,

										(SELECT pro_opt4.code
										FROM ".$property_entity_option_cls->getTable()." AS pro_opt4
										WHERE pro_opt4.property_entity_option_id = pro.auction_sale
										) AS auction_sale_code,

										(SELECT pro_term.value
										 FROM ".$property_cls->getTable('property_term').' AS pro_term 
										 LEFT JOIN '.$property_cls->getTable('auction_terms')." AS term
												ON pro_term.auction_term_id = term.auction_term_id
										 WHERE term.code = 'auction_start_price' AND pro.property_id = pro_term.property_id) AS start_price,

										(SELECT COUNT(*) FROM notes AS n WHERE n.entity_id_to = pro.property_id AND n.type != 'admin2customer') AS cproperty,
										(SELECT COUNT(*) FROM comments AS c WHERE c.property_id = pro.property_id) AS comproperty,
										(SELECT COUNT(*) FROM bids AS b WHERE b.property_id = pro.property_id) AS bidproperty
					
							FROM ".$property_cls->getTable().' AS pro 
							LEFT JOIN '.$agent_cls->getTable().' AS agt ON pro.agent_id = agt.agent_id
							LEFT JOIN '.$agent_cls->getTable('agent_type').' AS agtype ON agt.type_id = agtype.agent_type_id
							'.$search_where.@$_filter.'
							ORDER BY '.$sort_by.' '.$dir.'
							LIMIT '.$start.','.$limit,true);	
	
	//GROUP BY pro.property_id HAVING count(pro.property_id) >= 0	
	$total = $property_cls->getFoundRows();
	$topics = array();
	if (is_array($rows) and count($rows) > 0) {
		$isYT = $config_cls->getKey('youtube_enable');
		foreach ($rows as $row) {

            //format auction name
            //$auction_arr = PEO_getAuctionSale()
            if ($row['agent_type'] != 'agent'){
                $row['auction_name'] = $row['auction_sale'] == $auction_arr['auction']?'Live Auction':$row['auction_name'];
            }

            $row['price'] = showPrice($row['price']);
			$row['bid_price'] = showPrice($row['bid_price']);
			if ($row['bid_price'] == '$0'){
				$row['bid_price'] = showPrice($row['start_price']);
				if ($row['auction_name'] == 'Private Sale'){
					$row['bid_price'] = '_';
                    if($row['price'] == '$0')
                    {
                       $row['price'] = showPrice($row['price_on_application']);
                    }
				}
			}
            $row['price'] = $row['price_on_application'] == 1?'POA':$row['price'];
			
			$row['set_jump'] = (int)$row['set_jump'];
			$row['photo_num'] = $property_media_cls->getCountPhoto($row['property_id']);
			 
			$row['video_num'] = $isYT ? $property_media_cls->getCountYT($row['property_id']) : $property_media_cls->getCountVideo($row['property_id']);
			$row['doc_num'] = $property_document_cls->getCountDoc($row['property_id']);
			
			$row['agent_fullname'] = $row['firstname'].' '.$row['lastname'];
			$row['address'] = $row['address'].', '.$row['suburb'].', '.$row['postcode'].', '.$row['state_name'].', '.$row['country_name'];
			$row['pay_status'] = $property_cls->getPayStatus($row['pay_status']);

            $dt = new DateTime($row['end_time']);
		    $row['end_time'] = $dt->format('Y/m/d');
            $dt = new DateTime($row['start_time']);
		    $row['start_time'] = $dt->format('Y/m/d');
            $row['isBlock'] = PE_isTheBlock($row['property_id']);
            $row['ofAgent'] = PE_isTheBlock($row['property_id'],'agent');
            if ($row['date_to_reg_bid'] == '0000-00-00'){
                $row['date_to_reg_bid'] = '';
            }else{
                $dt = new DateTime($row['date_to_reg_bid']);
                $row['date_to_reg_bid'] = $dt->format('Y/m/d');
            }
            
			$topics[] = $row;
		}
	}		
	
	$result = array('totalCount' => $total, 'topics' =>formUnescapes($topics), 'limit' => $limit);
	die(json_encode($result));
}

/**
@ function : __propertyAttributeAction
**/

function __propertyAttributeAction($attr = '') {
	global $property_cls, $action;
	$property_id = (int)restrictArgs(getParam('property_id',0));
	$row = $property_cls->getRow('property_id = '.$property_id);
    $auction_sale = PEO_getAuctionSale();
	if ($property_id > 0) {
		if ($row[$attr] == 0) {
            if($attr == 'active' and $row['end_time'] < date('Y-m-d H:i:s') and $row['pay_status'] == Property::PAY_COMPLETE and $row['auction_sale'] == $auction_sale['auction']){
                $result = 'This property had been stopped, You can not active.';
                die(json_encode($result));
            }
			$property_cls->update(array($attr  => 1), 'property_id = '.$property_id);
            if($attr == 'focus'){
                $property_cls->update(array('focus_status'  => 1), 'property_id = '.$property_id);
            }
            if($attr == 'set_jump'){
                $property_cls->update(array('jump_status'  => 1), 'property_id = '.$property_id);
            }
		} else {
			$property_cls->update(array($attr  => 0), 'property_id = '.$property_id);
		}

	}
	
	/*
	$result = array('property_id' => $property_id,
					'status' => (int)$row[$attr ],
					'action' => $attr );
	*/
	$result = 'Datas have been updated.';
	die(json_encode($result));
}

/**
@ function : __propertyValidateAction
**/

function __propertyValidateAction() {
	global $property_cls;
	$result = array();
	$region = getPost('region');
	$region = strtoupper($region);

	$row = $property_cls->getRow("SELECT *

								  FROM ". $property_cls->getTable('code')." AS c
								  WHERE CONCAT(UCASE(suburb),' ',(SELECT reg_1.region_id
										FROM ".$property_cls->getTable('regions')." AS reg_1
										WHERE reg_1.code = c.state), ' ',pcode) LIKE '%". $region . "%'", true);
	//print_r($property_cls->sql);
	//print_r($row);
	if ($property_cls->hasError()) {

	}
	else if (is_array($row) and count($row)){
		$result[] = $row['id'];
	}
	//print_r($result);
	die(_response($result));

}

function __propertyActiveAction(){
    global $property_cls,$systemlog_cls;
	$property_ids = getParam('property_id');
	if (strlen($property_ids) > 0) {
		$property_id_ar = explode(',',$property_ids);
		if (count($property_id_ar) > 0) {
			foreach ($property_id_ar as $property_id) {
				$row = $property_cls->getRow('property_id = '.$property_id);
				if (is_array($row) && count($row) > 0) {
                    $_stt = (1-(int)$row['active'] == 0)?'InActive':'Active';
				    $property_cls->update(array('active'=>1-(int)$row['active']),'property_id = '.$property_id);

					// Write Logs
					$systemlog_cls->insert(array ('Updated' => date("Y-m-d H:i:s"),
												 'Action' => 'UPDATE',
												 'Detail' => "PROPERTY #".$property_id." SET STATUS: ".$_stt,
												 'UserID' => $_SESSION['Admin']['EmailAddress'],
												 'IPAddress' =>$_SERVER['REMOTE_ADDR']));
				}
			}
		}
	}
	die(json_encode('This information has been updated!'));
}

function __propertyChangePay(){
    global $property_cls, $systemlog_cls;
    $property_ids = getParam('property_id');
    $new_pay_status = getParam('pay');
    $value = $property_cls->getValuePay($new_pay_status);
    $message = '';
    if (strlen($value) > 0 && strlen($property_ids) > 0){
        $property_cls->update(array('pay_status'=>$value),'property_id IN ('.$property_ids.')');
        $detail = strlen($property_ids) > 1?'PROPERTIES ':'PROPERTY ';
        $systemlog_cls->insert(array ('Updated' => date("Y-m-d H:i:s"),
												 'Action' => 'UPDATE',
												 'Detail' => $detail.$property_ids." SET PAY STATUS: ".$new_pay_status,
												 'UserID' => $_SESSION['Admin']['EmailAddress'],
												 'IPAddress' =>$_SERVER['REMOTE_ADDR']));
        $message = 'success';
        
    }
    die(_response($message));
}
?>